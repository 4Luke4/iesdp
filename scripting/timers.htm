<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title> IE Timers </title>
<link rel="stylesheet" type="text/css" href="general.css" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
</head>

<body>
<div class="title_main">IE Timers</div>

<div>
  <br />
  There are two clocks in IE games:<br />
  <div class="indent1">
  1. Real clock that tracks real time player spent with game running (I'll call it
  CREAL).<br />
  2. Ingame clock that tracks ingame time - it's displayed in lower left corner of
  the game screen (I'll call it CINGAME).<br />
  </div>
  <br />
  When the game starts, both clocks start from 0.<br />
  <br />
  Now imagine that you press rest button. With that you are instantly moving
  CINGAME for eight hours (or less, or more, depends on your game setting). This
  puts CINGAME at <strong>higher</strong> value than CREAL.<br />
  CREAL you can't move forward like this. And do remember that, it's the most
  important part here.<br />
  <br />
  Ok, now another part: Timers.<br />
  You may give a command to set real or ingame timer at some point.<br />
  For example:<br />
  <strong>SetGlobalTimer(&quot;TINGAME&quot;,&quot;GLOBAL&quot;,3600)</strong> - TINGAME
  will expire after half a day of ingame time<br />
  <strong>RealSetGlobalTimer(&quot;TREAL&quot;,&quot;GLOBAL&quot;,3600)</strong> - TREAL
  will expire after 3600 seconds of real time<br />
  <br />
  But what happens inside the game here?<br />
  Game gets values from both clocks, adds the number we set above to the clock
  values and stores it in the global variables TINGAME and TREAL.<br />
  <br />
  Let's say CINGAME was 7,195,874 and CREAL was 2,395,858.<br />
  TINGAME will now have the value 7,195,874+3,600=7,199,474<br />
  TREAL will have the value 2,399,458<br />
  <br />
  This was an example, of course. What I need you to notice is that TINGAME is
  higher number than TREAL.<br />
  <br />
  Now we have two commands to check if timer expired. For timers we have we'll use
  within the scripts:<br />
  <strong>GlobalTimerExpired(&quot;TINGAME&quot;,&quot;GLOBAL&quot;)</strong><br />
  <strong>RealGlobalTimerExpired(&quot;TREAL&quot;,&quot;GLOBAL&quot;)</strong><br />
  <br />
  Now the game <strong>subtracts</strong> the value from clocks from timers to see if timers
  expired. If the result is negative that means timer expired! I won't give you an
  examples - but you know now why setting the timer to 1 will instantly mean that
  timer expired, no matter if it's real or ingame one. <br />
  <br />
  And what happens with messing the nature of the timers?<br />
  Let's say we placed this check in the script:<br />
  <strong>GlobalTimerExpired(&quot;TREAL&quot;,&quot;GLOBAL&quot;)</strong><br />
  <br />
  The game gets 2,399,458 (value of TREAL), subtracts from it value from the <strong>CINGAME</strong>
  which is 7,195,874 and gets:<br />
  <strong>negative number!!!</strong><br />
  <br />
  And what happens? The game thinks timer expired!
</div>

</body>
</html>