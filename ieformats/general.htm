<html>
<head>
<title> IE File Formats </title>
<link rel="stylesheet" type="text/css" href="general.css" />
</head>
<body>
<div class="title_main"> Notes & Conventions </div><br />

<div class="fileheader">Introduction</div>
<div class="indent1">
This section is the continuation of the old <a href="http://www.ugcs.caltech.edu/~jedwin/baldur.html"> Infinity Engine File Format Hacking Project</a>.
The data types which will be used in the descriptions are:<br />
<br />
<div class="indent1">
<table border="1" width="100%">
  <colgroup>
    <col width="10%">
    <col width="*">
  </colgroup>
  <thead>
    <tr>
      <th>Data type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>char array</td>
      <td>An array of ASCII characters, fixed in length</td>
    </tr>
    <tr>
      <td>ASCIIZ string</td>
      <td>An array of ASCII characters, terminated by a NUL character.
        Typically, char arrays in this can be NUL-terminated -- i.e. part of the
        array may be filled with garbage, and this will cause no problem, as
        long as at least one byte earlier in the array is a NUL character (ASCII
        00).</td>
    </tr>
    <tr>
      <td>word</td>
      <td>A little-endian &quot;word&quot; of 16-bits</td>
    </tr>
    <tr>
      <td>dword</td>
      <td>A little-endian &quot;double-word&quot; of 32-bits</td>
    </tr>
    <tr>
      <td>point</td>
      <td>A point within some reference frame, composed of two 16-bit words; the
        first is the x-coordinate and the second is the y-coordinate.</td>
    </tr>
    <tr>
      <td>rect</td>
      <td>A rectangle within some reference frame, composed of 4 16-bit words;
        the order of the coordinates is: <code>left</code>, <code>top</code>, <code>right</code>,
        <code>bottom</code>. Typically this is used to store bounding boxes of
        various objects.</td>
    </tr>
    <tr>
      <td>strref</td>
      <td>A reference into the 'TLK ' resource -- a 32-bit number which can be
        mapped to a string via a lookup into the TLK table.</td>
    </tr>
    <tr>
      <td>resref</td>
      <td>A reference to a specific resource -- an 8 character long string which
        is mapped to a resource via the KEY file and the override directory.
        Note that these are always 8 characters long, even though any characters
        after and including a NUL character in the name are ignored.</td>
    </tr>
  </tbody>
</table>
</div>
<br />
When bits are numbered, they will be numbered with the least-significant bit
as 0, and the most significant bit as 7, 15, or 31, for byte, word, or dword,
respectively.<br />
</div>
<br />
<div class="fileheader">General</div>
<div class="indent1">
Some internal use is made of the language <a href="http://www.lua.org/">Lua</a>,
developed by TeCGraf at the Pontifical Catholic University of Rio de Janeiro in
Brazil. This only applies to Baldur's Gate, as <a href="http://www.lua.org/">Lua</a>
was carefully excised in
Planescape: Torment. It is primarily used for the cheats/debugging console, into
which, in fact, can be typed complete Lua programs. There is a <a href="http://www.lua.org/docs.html"> documentation</a>
online; it will take you a couple of hours if you read it all, much less if you
just browse the highlights; it does not, as far as I've been able to determine,
actually play an important role in the internal functioning of the engine, and
was likely added as a debugging aid. Note that the AI scripts have <em>nothing</em>
to do with Lua.<br />
</div>
<br />
<div class="fileheader"><a name="FileFormats">File Formats</a></div>
<div class="indent1">
Without further musings, here are listed&nbsp; the formats used in IE games .
They are identified&nbsp; in 3 different ways. First, most file formats have a numerical
code, which we will call the <code>resType</code>. Second, all file
formats have an extension, which is used to determine what format the data
inside is expected to be. Third, most of the file formats are tagged -- i.e. the
first 4 bytes of the file are a (character) code, determining the format, as
well as another 4 byte code, determining the version of the format.<br />
<br />
<div class="indent1">
<table border="1" class="tblidx" width="100%">
  <colgroup>
    <col width="5%">
    <col width="8%">
    <col width="8%">
    <col width="10%">
    <col width="*">
  </colgroup>
  <thead>
    <tr>
      <th>ResType</th>
      <th>Extension</th>
      <th>Format tag</th>
      <th>Notes</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>N/A</td>
      <td>.key</td>
      <td>'KEY '</td>
      <td>&nbsp;</td>
      <td>Directory of resources, their locations, and their types. It is usually located in the main IE game directory.</td>
    </tr>
    <tr>
      <td width="56">N/A</td>
      <td width="65"><code>.bif</code></td>
      <td width="69">'<code>BIFF</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Archive containing resources, as indexed by the .KEY file</td>
    </tr>
    <tr>
      <td width="56">N/A</td>
      <td width="65"><code>.cbf</code></td>
      <td width="69">'<code>BIF </code>'</td>
      <td width="53">Icewind Dale only</td>
      <td width="255">Compressed archive containing resources, as indexed by the .KEY file.</td>
    </tr>
    <tr>
      <td width="56">N/A</td>
      <td width="65"><code>.tlk</code></td>
      <td width="69">'<code>TLK </code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Table in which strings (and occasionally, sounds) are looked up by strref.</td>
    </tr>
    <tr>
      <td width="56">N/A</td>
      <td width="65"><code>.acm</code></td>
      <td width="69">???</td>
      <td width="53">&nbsp;</td>
      <td width="255">Music.&nbsp; In aim to convert it to ordinary wav file we have to use acm2wav.exe tool. In aim to convert it again from wav to acm we use snd2acm.exe program (<a href="http://www.fallout.ru/teamx">http://www.fallout.ru/teamx</a>)</td>
    </tr>
    <tr>
      <td width="56">N/A</td>
      <td width="65"><code>.mus</code></td>
      <td width="69">N/A</td>
      <td width="53">Text format</td>
      <td width="255">It is responsible for the music play in IE games - loops, repeating, ending (for example battle songs, area songs, romance songs).</td>
    </tr>
    <tr>
      <td width="56">0x0001</td>
      <td width="65"><code>.bmp</code></td>
      <td width="69">N/A</td>
      <td width="53">&nbsp;</td>
      <td width="255">Microsoft-endorsed standard for static graphics. This is, as often as
        not, used for storing palettes, rather than for storing bitmapped
        graphics. In this case, the file will be a 1x1 pixel image, with a full
        palette. 4, 8, and 24 bit  BMPs are supported, but only uncompressed
         BMPs
        are supported.</td>
    </tr>
    <tr>
      <td width="56">0x0002</td>
      <td width="65"><code>.mve</code></td>
      <td width="69">???</td>
      <td width="53">&nbsp;</td>
      <td width="255">I do not know anything about this format. Also guarded by Interplay.</td>
    </tr>
    <tr>
      <td width="56">0x0004</td>
      <td width="65"><code>.wav</code>
        <p><code>.wac</code></p>
      </td>
      <td width="69">'<code>WAVC</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Sound files used throughout the game are stored in these formats. Note
        that 'WAVC' and 'RIFF' .wav files are used interchangeably throughout
        the engine; WAVC is an internal format -- more precisely, an ACM file
        with a header attached to simplify buffer estimation during file
        decompression.</td>
    </tr>
    <tr>
      <td width="56">0x0004</td>
      <td width="65"><code>.wav</a></td>
      <td width="69">N/A</td>
      <td width="53">&nbsp;</td>
      <td width="255">RIFF wave files. A published format. The Microsoft <code>mmio*</code> routines are not used for WAV reading. As a result, the file must be of the very straight-forward variety. Fortunately, most WAV files are.</td>
    </tr>
    <tr>
      <td width="56">0x0005</td>
      <td width="65">N/A</td>
      <td width="69">'WFX '</td>
      <td width="53">&nbsp;</td>
      <td width="255">They are located in Biffs that contain of huge amounts of WAVC
        files - so maybe they are responsible somehow for sounds?</td>
    </tr>
    <tr>
      <td width="56">0x0006</td>
      <td width="65">.plt</td>
      <td width="69">'<code>PLT </code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">A bitmapped graphics format used for paper dolls. It basically consists of interleaved bytes of 'color type' and 'intensity'.</td>
    </tr>
    <tr>
      <td width="56">0x03e8</td>
      <td width="65"><code>.bam</code></td>
      <td width="69">'<code>BAM </code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Used for animations as well as for multi-frame static graphics, this
        is a format supporting multiple animation cycles, each containing
        multiple frames. The GUI uses these extensively, as all the controls
        (buttons, sliders, etc) have controls represented by these files.</td>
    </tr>
    <tr>
      <td width="56">0x03e8</td>
      <td width="65"><code>.bam</code></td>
      <td width="69">'<code>BAMC</code>'</td>
      <td width="53">Baldur's Gate 2 only</td>
      <td width="255">Simple zlib based compression format. Essentially, an entire BAM file is compressed using zlib and a small header prepended.</td>
    </tr>
    <tr>
      <td width="56">0x03e9</td>
      <td width="65"><code>.wed</code></td>
      <td width="69">'<code>WED</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Represents the graphics of a region. Some connectivity information
        appears here, though probably only for clipping purposes -- i.e. we have
        2-d maps and tiles, but we need to simulate a 3-d environment. Thus, we
        store the walls in here so that we know which parts are raised, so that
        a person walking behind a wall is clipped. Anyway, this file type
        contains lists of regions (overlays), details for how animated tiles are
        to be animated, and which tiles change when doors are opened.</td>
    </tr>
    <tr>
      <td width="56">0x03ea</td>
      <td width="65"><code>.chu</code></td>
      <td width="69">'<code>CHUI</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">A representation (a la Windows dialog templates) of GUI elements.
        Basically, it is a list of 'windows', which may optionally have a .mos
        as a background, and a list of 'controls' for each window. The controls
        include 'slider controls', 'text fields', 'buttons', 'scroll bars' and a
        few other assorted types</td>
    </tr>
    <tr>
      <td width="56">0x03eb</td>
      <td width="65"><code>.tis</code></td>
      <td width="69">N/A</td>
      <td width="53">&nbsp;</td>
      <td width="255">This is the tileset information used for painting the screens. A
        tileset is basically an array of tiles which are composed of a palette
        of 256 24-bit colors and a block of pixels (typically 64x64) which are
        to be painted using that palette.</td>
    </tr>
    <tr>
      <td width="56">0x03ec</td>
      <td width="65"><code>.mos</code></td>
      <td width="69">'<code>MOS</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Yet another tiled file-format. This is used for backgrounds for gui
        windows and for the overhead map of regions. It is likely that this is
        stored in tile format only because of the compression advantages, as
        opposed to the .tis files which are stored in tiled format because of
        the pragmatic advantage of being able to load tiles quickly on demand.</td>
    </tr>
    <tr>
      <td width="56">0x03ec</td>
      <td width="65"><code>.mos</code></td>
      <td width="69">'<code>MOSC</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Compressed format, exactly like BAMC format, except with a different signature field in the header.</td>
    </tr>
    <tr>
      <td width="56">0x03ed</td>
      <td width="65"><code>.itm</code></td>
      <td width="69">'<code>ITM</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Objects which may appear in either the player character's inventory,
        or in various creatures 'inventory' are stored in these files.</td>
    </tr>
    <tr>
      <td width="56">0x03ee</td>
      <td width="65"><code>.spl</code></td>
      <td width="69">'<code>SPL</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Spells are stored in this format. This includes wizard spells (spwi*),
        priest spells (sppr*), and innate spells (spin*), as well as any spells
        which monsters have which are unavailable to the user.</td>
    </tr>
    <tr>
      <td width="56">0x03ef</td>
      <td width="65"><code>.bcs</code></td>
      <td width="69">N/A</td>
      <td width="53">Text format</td>
      <td width="255">Compiled script files, as are output by the script compiler.</td>
    </tr>
    <tr>
      <td width="56">0x03f0</td>
      <td width="65"><code>.ids</code></td>
      <td width="69">N/A</td>
      <td width="53">Text format</td>
      <td width="255">A mapping from numbers to text, typically giving descriptive names or
        labels to engine internals. For instance the exported functions that can
        be accessed from scripts are given IDs in one of these files.</td>
    </tr>
    <tr>
      <td width="56">0x03f1</td>
      <td width="65"><code>.cre</code></td>
      <td width="69">'<code>CRE</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">All the monsters in the game are stored in this format, which
        associates statistics, graphics, and AI scripts to baddies.</td>
    </tr>
    <tr>
      <td width="56">0x03f2</td>
      <td width="65"><code>.are</code></td>
      <td width="69">'<code>AREA</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">A description of an area, but more schematic than WED files. The AREA
        file contains descriptions of where containers, doors, actors, and items
        are in the area.</td>
    </tr>
    <tr>
      <td width="56">0x03f3</td>
      <td width="65"><code>.dlg</code></td>
      <td width="69">'<code>DLG</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">All inter-character dialog is scripted using these files.</td>
    </tr>
    <tr>
      <td width="56">0x03f4</td>
      <td width="65"><code>.2da</code></td>
      <td width="69"><code>2DA</code>'</td>
      <td width="53">Text format.</td>
      <td width="255">N.B.Do not count on the signature being at the beginning of the file. The reason for this is twofold. First, these are text files and may have spaces before the signature. Second, these may be encrypted with a simple XOR key. (Enough to stop a snooper, but not enough to keep a determined intruder out.) A &quot;two-dimensional array&quot; file format which has, in addition to a 2-dim array of strings, column and row headers. Typically used for storing the AD&amp;D rule sets.</td>
    </tr>
    <tr>
      <td width="56">0x03f5</td>
      <td width="65"><code>.gam</code></td>
      <td width="69">'<code>GAME</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Save game file format -- stores the current state of the party and of the internal variables.</td>
    </tr>
    <tr>
      <td width="56">N/A</td>
      <td width="65"><code>.sav</code></td>
      <td width="69">'<code>SAV</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Save game file format -- stores the current state of the areas the party has visited.</td>
    </tr>
    <tr>
      <td width="56">0x03f6</td>
      <td width="65"><code>.sto</code></td>
      <td width="69">'<code>STOR</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Store file format. Stores information on a stores stock, it's prices, and what it's willing to buy.</td>
    </tr>
    <tr>
      <td width="56">0x03f7</td>
      <td width="65"><code>.wmp</code></td>
      <td width="69">'<code>WMAP</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">World map file format. This stores information on which areas are
        located where on the world-map, and which graphics to use for them.</td>
    </tr>
    <tr>
      <td width="56">0x03f8</td>
      <td width="65"><code>.chr</code></td>
      <td width="69">'<code>CHR</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Exported player characters are stored in this format, which actually
        contains a .cre file in its entirety.</td>
    </tr>
    <tr>
      <td width="56">0x03f8</td>
      <td width="65"><code>.eff</code></td>
      <td width="69">'<code>EFF </code>'</td>
      <td width="53">ToTSC and IWD and BG2</td>
      <td width="255">The EFF V2.0 format replaces the old 30-byte effect structure found in
        CRE files and ITM files, and partially documented in the effects
        section. The EFF V2.0 format can be found either as a standalone file,
        or, if certain flags are set, in CRE files, and in SPL and ITM files.</td>
    </tr>
    <tr>
      <td width="56">0x03f9</td>
      <td width="65"><code>.bs</code></td>
      <td width="69">N/A</td>
      <td width="53">Text format</td>
      <td width="255">Principally the same as the .bcs file, these are only used for character control scripts. It is likely that they are restricted to a         subset of the functions callable from a .bcs</td>
    </tr>
    <tr>
      <td width="56">0x03fa</td>
      <td width="65"><code>.chr</code></td>
      <td width="69">'<code>CHR</code>'</td>
      <td width="53">&nbsp;</td>
      <td width="255">Character files. Used to be 0x3f8, but now that's EFF, so... Dunno.</td>
    </tr>
    <tr>
      <td width="56">0x03fb</td>
      <td width="65">.vvc</td>
      <td width="69"><code>'VVC'</code></td>
      <td width="53">&nbsp;</td>
      <td width="255">Visual 'spell casting' effects are described by these files.</td>
    </tr>
    <tr>
      <td width="56">0x03fc</td>
      <td width="65"><code>.vef</code></td>
      <td width="69">???</td>
      <td width="53">Baldur's Gate 2 only</td>
      <td width="255">Visual effects (possibly OpenGL effects?)</td>
    </tr>
    <tr>
      <td width="56">0x03fd</td>
      <td width="65">.pro</td>
      <td width="69"><code>'PRO'</code></td>
      <td width="53">&nbsp;</td>
      <td width="255">Description of 'projectile' types</td>
    </tr>
    <tr>
      <td width="56"><code>N/A</code></td>
      <td width="65">.res</td>
      <td width="69">???</td>
      <td width="53">IWD only
        <p>Text format</td>
      <td width="255">Stores the edited biography of characters.</td>
    </tr>
    <tr>
      <td width="56">0x03fe</td>
      <td width="65"><code>.bio</code></td>
      <td width="69">???</td>
      <td width="53">Baldur's Gate 2 only
        <p>Text format</p>
      </td>
      <td width="255">Stores the edited biography of characters.</td>
    </tr>
    <tr>
      <td width="56">0x044c</td>
      <td width="65"><code>.ba</code></td>
      <td width="69">???</td>
      <td width="53">Baldur's Gate 2 only</td>
      <td width="255"><span class="unknown">Unknown</span></td>
    </tr>
    <tr>
      <td width="56">N/A</td>
      <td width="65"><code>.baf</code></td>
      <td width="69">N/A</td>
      <td width="53">Text format</td>
      <td width="255">This is the file format used for scripts for the Infinity Engine, both
        for character control and, one would assume, for scripted events
        (although scripted events can call a broader range of functions than
        character AI scripts). These files compile to either .bs or .bcs files.</td>
    </tr>
    <tr>
      <td width="56">0x0802</td>
      <td width="65"><code>.ini</code></td>
      <td width="69">N/A</td>
      <td width="53">Text format<br />
        Torment and Icewind Dale</td>
      <td width="255">This is basically the windows .ini file format. It is focused on
        storing things like quest information and respawn information for areas.</td>
    </tr>
    <tr>
      <td width="56">0x0803</td>
      <td width="65"><code>.src</code></td>
      <td width="69">N/A</td>
      <td width="53">Torment only</td>
      <td width="255">This is a binary file format, though very simple. It is used to
        determine the text that appears over people's heads on the overland
        screen.</td>
    </tr>
    <tr>
      <td width="56">N/A</td>
      <td width="65"><code>.toh</code></td>
      <td width="69">'<code>TLK </code>'</td>
      <td width="53">Icewind Dale only/BG2 only</td>
      <td width="255">&quot;Talk Table Override Header&quot;. This is used for overrides to
        specific entries in the <code>TLK</code> file. It is used in conjunction with the <code>.tot</code> file.</td>
    </tr>
    <tr>
      <td>N/A</td>
      <td>.tot</td>
      <td>N/A</td>
      <td>Icewind Dale only/BG2 only</td>
      <td>&quot;Talk Table Override Text&quot;. This is used for overrides to specific
        entries in the TLK file. It is used in conjunction with the .toh file.</td>
    </tr>
    <tr>
      <td>N/A</td>
      <td>.var</td>
      <td>N/A</td>
      <td>Planescape Torment only</td>
      <td>File that stores variables declarations for starting game.</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</body>
</html>