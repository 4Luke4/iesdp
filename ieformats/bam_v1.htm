<html>
<head>
<link rel="stylesheet" type="text/css" href="general.css" />
</head>
<body>
<div class="title_main">BAM file format</div>
<br />
<div class="fileheader">Applies to:</div>
<div class="indent1">BG1, BG1: TotS, BG2, BG2: ToB, PST, IWD, IWD:HoW, IWD:TotL, IWD2</div><br />

<div class="fileheader">File versions</div>
<div class="indent1">
<a href="#bamv1_Header">BAM</a><br />
<a href="#bamcv1_Header">BAMC</a><br />
</div>
<br />

<div class="fileheader">General Description</div>
<div class="indent1">
These files primarily hold animations. However, they also hold some other
static images which are not meant to be animated, but are, rather, simply need
to be packaged together. For instance, fonts in Infinity Engine games are
typically packaged in these files. As another example, most GUI controls have
all of their supporting graphics packaged in BAM files, with, for instance, one
frame representing the unpressed state of a button, one representing the pressed
state, one for the selected state, and one for the disabled state. Note that a
maximum of 255 cycles (animations) are supported. Since the fonts are stored
with each character being a 'cycle', there are a maximum of 255 displayable
chars in an infinity engine font. (i.e. the character 0xff does not have a
representative in the font.<br />
NB. While the BAM format allows the dimensions of a frame to be very large, the engine will only show frames up to a certain size. This maximum size varies with the version of the engine:<br />
  <div class="indent1">
  <span class="unknown">BG1: Unknown</span><br />
  BG2:  256*256<br />
  <span class="unknown">PST: Unknown (greater than 256*256)</span><br />
  <span class="unknown">IWD1: Unknown</span><br />
  <span class="unknown">IWD2: Unknown</span><br />
</div>
<br />

<div class="fileheader">Detailed Description</div>
<div class="indent1">
Overall structure:<br />
<div class="indent1">
  <li><a href="#bamv1_Header">Header</a>
  <li><a href="#bamv1_FrameEntry">Frame entries</a>
  <li><a href="#bamv1_CycleEntry">Cycle entries</a>
  <li><a href="#bamv1_Palette">Palette</a>
  <li><a href="#bamv1_FrameLUT">Frame Lookup Table</a>
  <li><a href="#bamv1_Data">Frame data</a></li>
</div>
<br />
</div>


<div class="fileheader"><a name="bamv1_Header">BAM V1 Header</a></div>
<br />
<div class="indent1">
<table border="1" width="98%">
  <colgroup>
    <col width="5%">
    <col width="12%">
    <col width="*">
  </colgroup>
  <thead>
    <tr>
      <th>Offset</th>
      <th>Size (data type)</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0000</td>
      <td>4 (char array)</td>
      <td>Signature ('BAM ')</td>
    </tr>
    <tr>
      <td>0x0004</td>
      <td>4 (char array)</td>
      <td>Version ('V1 ')</td>
    </tr>
    <tr>
      <td>0x0008</td>
      <td>2 (word)</td>
      <td>Number of <a href="#bamv1_FrameEntry">frames</a> in this file</td>
    </tr>
    <tr>
      <td>0x000a</td>
      <td>1 (unsigned byte)</td>
      <td>Number of <a href="#bamv1_CycleEntry">cycles</a> in this file</td>
    </tr>
    <tr>
      <td>0x000b</td>
      <td>1 (unsigned byte)</td>
      <td>The compressed color index for RLE encoded bams (ie. this is the colour
        that is compressed).<br />
        <br />
        The transparency index is calculated thus: it's the first occurence of
        &nbsp;rgb(0,255,0) (it can occur twice) and if that color isn't present
        in the palette than the color at index 0 is the transparency color</td>
    </tr>
    <tr>
      <td>0x000c</td>
      <td>4 (dword)</td>
      <td>Offset from start of file to <a href="#bamv1_FrameEntry">frame
        entries</a> (which are immediately followed by <a href="#bamv1_CycleEntry">cycle
        entries</a>)</td>
    </tr>
    <tr>
      <td>0x0010</td>
      <td>4 (dword)</td>
      <td>Offset from start of file to <a href="#bamv1_Palette">palette</a></td>
    </tr>
    <tr>
      <td>0x0014</td>
      <td>4 (dword)</td>
      <td>Offset from start of file to <a href="#bamv1_FrameLUT">frame
        lookup table</a></td>
    </tr>
  </tbody>
</table>
</div>
<br />

<div class="fileheader"><a name="bamv1_FrameEntry">BAM V1 Frame Entries</a></div>
<br />
<div class="indent1">
Several cycles may share the same frame. This is done by adding a layer of
indirection. Instead of specifying which frames belong to a given cycle, each
cycle has a list of frame indices.<br />
<br />
<table border="1" width="98%">
  <colgroup>
    <col width="5%">
    <col width="12%">
    <col width="*">
  </colgroup>
  <thead>
    <tr>
      <th>Offset</th>
      <th>Size (data type)</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0000</td>
      <td>2 (word)</td>
      <td>Width of frame</td>
    </tr>
    <tr>
      <td>0x0002</td>
      <td>2 (word)</td>
      <td>Height of frame</td>
    </tr>
    <tr>
      <td>0x0004</td>
      <td>2 (word)</td>
      <td>X coordinate of center of frame</td>
    </tr>
    <tr>
      <td>0x0006</td>
      <td>2 (word)</td>
      <td>Y coordinate of center of frame</td>
    </tr>
    <tr>
      <td>0x0008</td>
      <td>4 (dword)</td>
      <td>
        <div class="indent1">
          <li>bits 30-0: Offset to <a href="#bamv1_Data">frame data</a>
          <li>bit 31: 0=Uncompressed, 1=Compressed (RLE)</li>
        </div>
      </td>
    </tr>
  </tbody>
</table>
</div>
<br />

<div class="fileheader"><a name="bamv1_CycleEntry">BAM V1 Cycle Entries</a></div>
<br />
<div class="indent1">
These entries refer to a range of indices in the <a href="#bamv1_FrameLUT">frame
lookup table</a>, which in turn points to the actual frames. Note that entries
in the <a href="#bamv1_FrameLUT">frame lookup table</a> can also be shared
between cycles.<br />
<br />
<table border="1" width="98%">
  <colgroup>
    <col width="5%">
    <col width="12%">
    <col width="*">
  </colgroup>
  <thead>
    <tr>
      <th>Offset</th>
      <th>Size (data type)</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0000</td>
      <td>2 (word)</td>
      <td>Number of <a href="#bamv1_FrameLUT">frame indices</a> in this
        cycle</td>
    </tr>
    <tr>
      <td>0x0002</td>
      <td>2 (word)</td>
      <td>Index into <a href="#bamv1_FrameLUT">frame lookup table</a> of
        first frame index in this cycle</td>
    </tr>
  </tbody>
</table>
</div>
<br />

<div class="fileheader"><a name="bamv1_Palette">BAM V1 Palette</a></div>
<br />
<div class="indent1">
The palette is a standard array of 'RGBQUAD' structures, which means that the
layout looks like:<br />
<pre>	BB GG RR 00
	BB GG RR 00
	BB GG RR 00
	...
	BB GG RR 00
</pre>
Two possibilities for the purpose of the extra byte ('00') are that it is
either the alpha component, always set to 0, or that, as is frequently the case
with Windows programming via GDI, the extra byte could hold flags. (i.e. There
is a flag that can be set in such entries under Windows to force it to treat the
palette entry as a palette index instead of an RGB value.) In practice, it
doesn't matter too much, since BG always runs in 16-bit or higher color mode,
and doesn't use alpha transparency in its animations.<br />
</div>
<br />

<div class="fileheader"><a name="bamv1_FrameLUT">BAM V1 Frame Lookup Table</a></div>
<br />
<div class="indent1">
This is an array of frame indices. A cycle specifies a sequence of entries in
this table. For instance, an animation might start at the 0th element in this
array, and travel over 6 frames. (The next animation, then, would typically
start at the 6th element and run over some number of indices.) If the first 6
entries in this table were { 0, 1, 1, 2, 3, 4 }, the animation would display
frame #0, followed by frame #1 for two time periods, followed by frames 2, 3, 4
in order. To find the number of entries in this lookup table, all you need to do
is find the largest value of <code>start+count</code> in the cycle entries
table.<br />
</div>
<br />

<div class="fileheader"><a name="bamv1_Data">BAM V1 Frame Data</a></div>
<br />
<div class="indent1">
If this is not a compressed frame, then this is simply <code>width*height</code>
bytes, which are pixel values using the palette specified earlier.</p>
If this <strong>is</strong> a compressed frame, then a simple run-length-encoding
scheme applies. The scheme is as follows:<br />
<div class="indent1">
  <li>Any byte which is not the transparent index from the header represents
    itself.
  <li>The transparent index followed by a byte <code>x</code> represents <code>(x+1)</code>
    copies of the transparent index</li>
</div>
If you are not familiar with run length encoding, it is a big win because
most pixels in this type of image are transparent, and up to 256 transparent
pixels in a row can by compressed down to 2 bytes. Most of the time transparent
pixels appear in groups of 2 or more, so this compression scheme gains a lot.<br />
</div>
<br />

<div class="title_main"> BAMC format</div>
<div class="fileheader"><a name="bamcv1">BAMC V1</a></div>
<div class="indent1">
Overall structure:<br />
<div class="indent1">
  <li><a href="#bamcv1_Header">Header</a>
  <li><em>zlib compressed data</em></li>
</div>
<br />
</div>

<div class="fileheader"><a name="bamcv1_Header">BAMC V1 Header</a></div>
<br />
<div class="indent1">
The BAMC V1 data is an entire BAM V1 resource compressed with zlib and with a
12-byte header prepended, as seen below.<br />
<br />
<table border="1" width="98%">
  <colgroup>
    <col width="5%">
    <col width="12%">
    <col width="*">
  </colgroup>
  <thead>
    <tr>
      <th>Offset</th>
      <th>Size (data type)</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0000</td>
      <td>4 (char array)</td>
      <td>Signature ('BAMC')</td>
    </tr>
    <tr>
      <td>0x0004</td>
      <td>4 (char array)</td>
      <td>Version ('V1 ')</td>
    </tr>
    <tr>
      <td>0x0008</td>
      <td>4 (dword)</td>
      <td>Uncompressed data length</td>
    </tr>
  </tbody>
</table>
</div>
</body>
</html>
