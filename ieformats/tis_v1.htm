<html>
<head>
<link rel="stylesheet" type="text/css" href="general.css" />
</head>
<body>
<div class="title_main">TIS file format</div>
<br />
<div class="fileheader">Applies to:</div>
<div class="indent1">BG1, BG1: TotS, BG2, BG2: ToB, PST, IWD, IWD:HoW, IWD:TotL, IWD2</div><br />

<div class="fileheader">General Description</div>
<div class="indent1">
TIS is, no doubt, short for tileset, since that is what these files
essentially are. TIS files are comprised of a (typically) large number of tiles,
which are, themselves, composed of a palette and a rectangular block of pixels,
which are indices into the associated palette. Each tile has its own palette and
a block of pixels. The pixel data is not at all compressed.<br />
</div>
<br />

<div class="fileheader">Detailed Description</div>
<div class="indent1">
A tileset doesn't mean much on its own, since the tile locations are
specified in another file (the .WED file). The layout of a tile is as follows.
First, there is a 256-color palette. Each palette entry is a Windows RGBQUAD
structure, which means that each palette entry is 4-bytes long, and that the
layout in memory is <code>B</code>, <code>G</code>, <code>R</code>, <code>a</code>.
The <code>a</code> is probably flags, since that is what the extra byte is used
for in the Win32 API. It could be alpha, but alpha transparency is not used in
BG. In either case, it is immaterial, since it doesn't appear to be used
anywhere. Immediately following that, there are 8-bit pixel values, which are
indices into this palette. The pixel values come one after another, row by row,
from left to right and top to bottom. Index 0 is hardcoded to be the transparent
index. (I think; however, I had previously believed this to be true of the BAM
file format, and found myself to be quite mistaken, so...)<br />
<br />
</div>

<div class="fileheader">Header</div><br />
<div class="indent1">
The Header has a constant length of 18h bytes.<br />
<br />
<table border="1" width="98%">
  <tr>
    <td><strong>Offset</strong></td>
    <td><strong>Data type</strong></td>
    <td><strong>Description</strong></td>
  </tr>
  <tr>
    <td>0x0000</td>
    <td>(4 char )</td>
    <td>Signature ('TIS ')</td>
  </tr>
  <tr>
    <td>0x0004</td>
    <td>(4 char)</td>
    <td>Version 'V1 &nbsp;'</td>
  </tr>
  <tr>
    <td>0x0008</td>
    <td>(4 dword)</td>
    <td>Count of tiles within this tileset</td>
  </tr>
  <tr>
    <td>0x000c</td>
    <td>(4 dword)</td>
    <td>Length of Tiles section</td>
  </tr>
  <tr>
    <td>0x0010</td>
    <td>(4 dword)</td>
    <td>Size of the header (offset to tiles)</td>
  </tr>
  <tr>
    <td>0x0014</td>
    <td>(4 dword)</td>
    <td>Dimension of 1 tile in pixels (64x64).</td>
  </tr>
</table>
<br />
The offset 18h seems to be fixed beginning of Tiles sections that have length
specified in offset 0x000c and the number of them withing this file is specified
in 0x0008 offset.<br />
<div class="indent1">
  <li>One tile inside TIS files is 0x000c offset value&nbsp; bytes long.</li>
  <li>All tiles are composed of 0x0014 offset value pixels</li>
  <li>Usually in areas that contain doors/ overlays areas there are several more
    tiles than it may be visible on main area .&nbsp;</li>
  <li>Such a tile has size :&nbsp;&nbsp; (Width(in tiles)*Height(in tiles) +
    DoorsTilesClosedState + OverlayShapesTiles) *(offset 0x000c value) bytes</li>
  <li>The special &quot;green&quot; colour is used to mark overlay areas in
    OverlayShapesTiles.</li>
  <li>DoorTilesClosedState and OverlayShapesTiles are also referenced from WED
    files but as the alternative tiles from Tilemap structure and their
    appearance is defined by offset 0x0006 of this structure.&nbsp;&nbsp;</li>
</div>
</div>
</body>
</html>
